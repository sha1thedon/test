datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text

  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]

  notes Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])

}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Note {
  id Int      @id @default(autoincrement())
  Content String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  cards Card[]

  @@index([courseId])
}

model CalendarEvent {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  createdAt DateTime @default(now())
}

model AITutorInput {
  id Int @id @default(autoincrement())
  input String
  createdAt DateTime @default(now())
}

model Board {
  id Int @id @default(autoincrement())
  title String
  createdAt DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Card {
  id Int @id @default(autoincrement())
  title String
  content String
  noteId Int
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model ToDo {
  id String @id @default(uuid())
  title String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FlashcardSet {
  id String @id @default(uuid())
  userId String
  title String
  flashcards Flashcard[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
  id String @id @default(uuid())
  flashcardsetId String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course FlashcardSet @relation(fields: [flashcardsetId], references: [id], onDelete: Cascade)
}

model Topic {
  id Int @id @default(autoincrement())
  title String
  createdAt DateTime @default(now())
  updatedAt     DateTime @updatedAt
}